package asn1.ber

import org.scalatest.FlatSpec

class BerIntegerTest extends FlatSpec {

  // Test examples taken from Ruby net-ldap test_ber.rb
  val testData = Seq[(BigInt, Seq[Byte])](
    (0, Seq(0x02, 0x01, 0x00)),
    (1, Seq(0x02, 0x01, 0x01)),
    (127, Seq(0x02, 0x01, 0x7F)),
    (128, Seq(0x02, 0x02, 0x00, 0x80.toByte)),
    (255, Seq(0x02, 0x02, 0x00, 0xFF.toByte)),
    (256, Seq(0x02, 0x02, 0x01, 0x00)),
    (65535, Seq(0x02, 0x03, 0x00, 0xFF.toByte, 0xFF.toByte)),
    (65536, Seq(0x02, 0x03, 0x01, 0x00, 0x00)),
    (8388607, Seq(0x02, 0x03, 0x7F, 0xFF.toByte, 0xFF.toByte)),
    (8388608, Seq(0x02, 0x04, 0x00, 0x80.toByte, 0x00, 0x00)),
    (16777215, Seq(0x02, 0x04, 0x00, 0xFF.toByte, 0xFF.toByte, 0xFF.toByte)),
    (0x01000000, Seq(0x02, 0x04, 0x01, 0x00, 0x00, 0x00)),
    (0x3FFFFFFF, Seq(0x02, 0x04, 0x3F, 0xFF.toByte, 0xFF.toByte, 0xFF.toByte)),
    (0x4FFFFFFF, Seq(0x02, 0x04, 0x4F, 0xFF.toByte, 0xFF.toByte, 0xFF.toByte)),
    // Some odd samples...
    (5, Seq(0x02, 0x01, 0x05)),
    (500, Seq(0x02, 0x02, 0x01, 0xF4.toByte)),
    (50000, Seq(0x02, 0x03, 0x00, 0xC3.toByte, 0x50)),
    (5000000000L, Seq(0x02, 0x05, 0x01, 0x2A, 0x05, 0xF2.toByte, 0x00)),
    // negatives
    (-1, Seq(0x02, 0x01, 0xFF.toByte)),
    (-127, Seq(0x02, 0x01, 0x81.toByte)),
    (-128, Seq(0x02, 0x01, 0x80.toByte)),
    (-255, Seq(0x02, 0x02, 0xFF.toByte, 0x01)),
    (-256, Seq(0x02, 0x02, 0xFF.toByte, 0x00)),
    (-65535, Seq(0x02, 0x03, 0xFF.toByte, 0x00, 0x01)),
    (-65536, Seq(0x02, 0x03, 0xFF.toByte, 0x00, 0x00)),
    (-65537, Seq(0x02, 0x03, 0xFE.toByte, 0xFF.toByte, 0xFF.toByte)),
    (-8388607, Seq(0x02, 0x03, 0x80.toByte, 0x00, 0x01)),
    (-8388608, Seq(0x02, 0x03, 0x80.toByte, 0x00, 0x00)),
    (-16777215, Seq(0x02, 0x04, 0xFF.toByte, 0x00, 0x00, 0x01))
  )

  "BerInteger" should "decode a range of BigInt values" in {
    for ((num, bytes) <- testData)
      assert(Ber.decode(bytes) == (BerInteger(num), Seq()))
  }

  it should "encode a range of BigInt values" in {
    for ((num, bytes) <- testData)
      assert(BerInteger(num).toBytes == bytes)
  }

}
